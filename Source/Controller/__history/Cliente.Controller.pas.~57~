unit Cliente.Controller;

interface

uses
  DB, System.SysUtils,
  Database.DataModule,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.Comp.DataSet,
  Winapi.Windows,
  Vcl.StdCtrls;

type
  TFilterType = (ftAll, ftCodigo, ftDescricao, ftCidade, ftUF);

type
  TClienteController = class
  private

  public
    procedure getClientes(MemTable: TFDMemTable; FilterValue: String;
      FilterType: TFilterType; out MsgError: String);

    procedure PesquisaKeyPress(Sender: TObject; var Key: Char);

    constructor Create;
    destructor Destroy; override;
  end;

implementation

{ TClienteController }

constructor TClienteController.Create;
begin
  inherited;
end;

destructor TClienteController.Destroy;
begin
  inherited;
end;

procedure TClienteController.getClientes(MemTable: TFDMemTable;
  FilterValue: String; FilterType: TFilterType; out MsgError: String);
var
  Query: TFDQuery;
begin
  Query := Connection.GetQuery();
  try
    try
      Query.SQL.Text := 'SELECT * FROM CLIENTES ';

      case FilterType of
        ftCodigo:
          begin
            Query.SQL.Text := Concat(Query.SQL.Text, 'WHERE CODIGO = :CODIGO');
            Query.ParamByName('CODIGO').AsInteger :=
              StrToIntDef(FilterValue, 0);
          end;
        ftDescricao:
          begin
            Query.SQL.Text := Concat(Query.SQL.Text, 'WHERE NOME like :NOME');
            Query.ParamByName('NOME').AsString := Concat('%', FilterValue, '%');
          end;
        ftCidade:
          begin
            Query.SQL.Text := Concat(Query.SQL.Text,
              'WHERE CIDADE like :CIDADE');
            Query.ParamByName('CIDADE').AsString :=
              Concat('%', FilterValue, '%');
          end;
        ftUF:
          begin
            Query.SQL.Text := Concat(Query.SQL.Text, 'WHERE UF like :UF');
            Query.ParamByName('UF').AsString := Concat('%', FilterValue, '%');
          end;
        ftAll:
          begin
            { All }
          end;
      end;

      Query.Open();
      Query.Transaction.Commit;

      MemTable.CopyDataSet(Query, [coStructure, coRestart, coAppend]);
    except
      on E: Exception do
      begin
        Query.Transaction.Rollback();
        FreeAndNil(Query.Transaction);
        FreeAndNil(Query);
        MsgError := E.Message;
      end;
    end;
  finally
    if Assigned(Query) then
    begin
      FreeAndNil(Query.Transaction);
      FreeAndNil(Query);
    end;
  end;
end;

procedure TClienteController.PesquisaKeyPress(Sender: TObject; var Key: Char);
var
  Texto1, Texto2: string;
  I: byte;
  Valor: Double;
begin
  if TryStrToFloat(TEdit(Sender).Text, Valor) then
  begin
    if (Key in ['0' .. '9', Char(vk_back)]) then
    begin
      if (Key in ['0' .. '9']) and (Length(Trim(TEdit(Sender).Text)) > 23) then
        Key := #0;

      Texto2 := '0';
      Texto1 := Trim(TEdit(Sender).Text) + Key;
      for I := 1 to Length(Texto1) do
        if Texto1[I] in ['0' .. '9'] then
          Texto2 := Texto2 + Texto1[I];

      if Key = Char(vk_back) then
        Delete(Texto2, Length(Texto2), 1);

      Texto2 := FormatFloat('#0.00', StrToInt64(Texto2) / 100);

      TEdit(Sender).Text := Texto2;

      TEdit(Sender).SelStart := Length(Texto2);
    end;
    Key := #0;
  end;
end;

end.
